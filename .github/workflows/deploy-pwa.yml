name: Deploy PWA to AWS S3

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: "20" # Updated to a more recent LTS version
  AWS_REGION: "us-east-1" # Change to your preferred region
  # New: Expose CloudFront Distribution ID as an environment variable for easier access and to
  # potentially bypass parsing issues with 'env' directly in 'if' conditions.
  CLOUDFRONT_DISTRIBUTION_ID_ENV: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        # Create .env file as fallback for build process
        run: |
          echo "EXPO_PUBLIC_SUPABASE_URL=${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}" >> .env
          echo "EXPO_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}" >> .env

      - name: Debug environment variables
        # Debug step to verify env vars are set
        run: |
          echo "Checking environment variables..."
          echo "EXPO_PUBLIC_SUPABASE_URL is set: $([[ -n "$EXPO_PUBLIC_SUPABASE_URL" ]] && echo "YES" || echo "NO")"
          echo "EXPO_PUBLIC_SUPABASE_ANON_KEY is set: $([[ -n "$EXPO_PUBLIC_SUPABASE_ANON_KEY" ]] && echo "YES" || echo "NO")"
          echo ".env file contents:"
          cat .env
        env:
          EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Lint code
        run: npm run lint

      - name: Build PWA
        # Pass Supabase env directly as environment variables to the build command.
        # This is the most reliable way to ensure they are available during the build.
        env:
          EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
        run: npm run pwa:build

      - name: Upload production artifacts
        # Uploads the 'dist' folder as a workflow artifact for debugging and review.
        uses: actions/upload-artifact@v4
        with:
          name: pwa-build-artifacts
          path: dist/
          retention-days: 7 # Keep artifacts for 7 days

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3 (Immutable Assets)
        # Syncs all assets except HTML, service worker, and manifest with long cache control.
        run: |
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "sw.js" \
            --exclude "manifest.json"

      - name: Deploy to S3 (HTML, SW, Manifest - Short Cache)
        # Syncs HTML, service worker, and manifest with no-cache/revalidate control.
        # This will be overridden for manifest.json by the next step.
        run: |
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html" \
            --include "sw.js" \
            --include "manifest.json"

      - name: Set Specific S3 Content Types and Cache Controls
        # Explicitly sets content type and specific cache control for manifest.json.
        # The sw.js cp is largely for explicit content-type assurance.
        run: |
          # Set correct content types for sw.js (cache control matches previous sync, but content-type is explicit)
          aws s3 cp dist/sw.js s3://${{ secrets.S3_BUCKET_NAME }}/sw.js \
            --content-type "application/javascript" \
            --cache-control "public,max-age=0,must-revalidate"

          # Set correct content type and longer cache for manifest.json (overrides previous sync)
          aws s3 cp dist/manifest.json s3://${{ secrets.S3_BUCKET_NAME }}/manifest.json \
            --content-type "application/json" \
            --cache-control "public,max-age=86400"

      - name: Invalidate CloudFront
        if: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        # Invalidates the CloudFront distribution cache for all paths to ensure latest content.
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Deploy status
        run: |
          echo "‚úÖ PWA deployed successfully!"
          echo "üåê S3 Bucket: ${{ secrets.S3_BUCKET_NAME }}"
          if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "üöÄ CloudFront Distribution: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
          fi

  # Optional: Run tests before deployment
  # This job runs independently unless 'needs: test' is added to 'build-and-deploy' job.
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      # Add more tests here as you develop them
      # - name: Run unit tests
      #   run: npm test

      # - name: Run e2e tests
      #   run: npm run test:e2e
